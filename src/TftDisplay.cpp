/////////////////////////////////////////////////////////////////////////////
//
// WiFi TFT Display
//
// Copyright (c) 2017 Colin Irwin
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//
// For all other enquiries, contact Colin Irwin at lagrangianpoint:
// colin@lagrangianpoint.net.
//
/////////////////////////////////////////////////////////////////////////////

#include "Arduino.h"
#include "TftDisplay.hpp"

#include <cstdio>
#include <cstring>

using namespace wifi_tft_display;

static int16_t const RH_VALUE_X = 		150;
static int16_t const RH_VALUE_Y = 		184;

static int16_t const TEMP_VALUE_X =		150;
static int16_t const TEMP_VALUE_Y =		108;

static int16_t const TIME_VALUE_X =		150;
static int16_t const TIME_VALUE_Y =		32;

static int16_t const VALUE_WIDTH = 		108;
static int16_t const VALUE_HEIGHT = 	24;

static uint8_t const DISPLAY_ROTATION =	3;
static uint8_t const TEXT_SIZE = 		3;

static int8_t const DISPLAY_CS =		A2;
static int8_t const DISPLAY_DC =		A6;
static int8_t const DISPLAY_RST =		A7;

char tempBuffer[ 7 ];

const unsigned char bmpClock [] PROGMEM = {
	0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
	0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff,
	0xff, 0xe0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x7f, 0xfc,
	0x00, 0x00, 0x7f, 0xf0, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x03, 0xff, 0x00, 0x01,
	0xff, 0x00, 0x00, 0x00, 0xff, 0x80, 0x03, 0xfe, 0x00, 0x38, 0x00, 0x7f, 0xc0, 0x07, 0xfc, 0x00,
	0x7c, 0x00, 0x1f, 0xe0, 0x07, 0xf0, 0x00, 0x7c, 0x00, 0x0f, 0xe0, 0x0f, 0xf0, 0x00, 0x7c, 0x00,
	0x07, 0xf0, 0x0f, 0xe0, 0x00, 0x7c, 0x00, 0x07, 0xf8, 0x1f, 0xc0, 0x00, 0x7c, 0x00, 0x03, 0xf8,
	0x1f, 0x80, 0x00, 0x7c, 0x00, 0x01, 0xfc, 0x3f, 0x80, 0x00, 0x7c, 0x00, 0x01, 0xfc, 0x3f, 0x00,
	0x00, 0x7c, 0x00, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xfe, 0x7e, 0x00, 0x00, 0x7c,
	0x00, 0x00, 0x7e, 0x7e, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x7e, 0x7e, 0x00, 0x00, 0x7c, 0x00, 0x00,
	0x7e, 0xfc, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x3f, 0xfc,
	0x00, 0x00, 0x7c, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00,
	0x7f, 0xff, 0xf0, 0x3f, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x3f, 0xfc, 0x00, 0x00, 0x7f, 0xff,
	0xf8, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xf8, 0x3f, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xf0, 0x3f,
	0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7e, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7f, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x01,
	0xfc, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x1f,
	0xe0, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x07, 0xf0, 0x00,
	0x00, 0x00, 0x0f, 0xe0, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x03, 0xfe, 0x00, 0x00, 0x00,
	0x7f, 0xc0, 0x01, 0xff, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0xff, 0xc0, 0x00, 0x03, 0xff, 0x00,
	0x00, 0x7f, 0xf0, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x1f,
	0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xff,
	0xff, 0xc0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00,
	0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x0
};

const unsigned char bmpHumidity [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00,
	0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe7, 0xe0, 0x00, 0x00, 0x00,
	0x00, 0x0f, 0xc3, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f,
	0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x3f,
	0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x0f, 0x80, 0x00,
	0x00, 0x03, 0xe0, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x07,
	0xc0, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x0f, 0x80, 0x00,
	0x01, 0xf0, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x78,
	0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00,
	0x3c, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x78, 0x00,
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
	0x1e, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0x00,
	0x00, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0xf9,
	0xc0, 0x00, 0x00, 0x1f, 0x00, 0x00, 0xf8, 0xc0, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x78, 0xe0, 0x00,
	0x00, 0x1e, 0x00, 0x00, 0x78, 0xe0, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x78, 0xf0, 0x00, 0x00, 0x1e,
	0x00, 0x00, 0x7c, 0x70, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x3c, 0x78, 0x00, 0x00, 0x3c, 0x00, 0x00,
	0x3e, 0x3c, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x1e, 0x1f, 0x00, 0x00, 0x78, 0x00, 0x00, 0x1f, 0x0f,
	0xf0, 0x00, 0xf8, 0x00, 0x00, 0x0f, 0x83, 0xf0, 0x01, 0xf0, 0x00, 0x00, 0x0f, 0xc0, 0xf0, 0x03,
	0xf0, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x1f, 0xc0, 0x00,
	0x00, 0x01, 0xff, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
	0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff,
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
};

const unsigned char bmpReturn [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x07, 0xff, 0xff,
	0xff, 0xff, 0xc0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff,
	0xf8, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
	0x07, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xff,
	0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x38,
	0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x03, 0xff, 0x00, 0x01, 0xfc, 0x00, 0x00,
	0x03, 0xff, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x03, 0xff, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x03, 0xff,
	0x00, 0x3f, 0xf8, 0x00, 0x00, 0x03, 0xff, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0x01, 0xff,
	0xf0, 0x00, 0x00, 0x07, 0xff, 0x07, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00,
	0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char bmpTemperature [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x1f, 0xfc, 0x00,
	0x00, 0x3f, 0xfc, 0x00, 0x00, 0x7c, 0x3e, 0x00, 0x00, 0x78, 0x1e, 0x00, 0x00, 0xf0, 0x0f, 0x00,
	0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00,
	0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00,
	0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00,
	0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00,
	0x00, 0xf1, 0x8f, 0x00, 0x00, 0xf3, 0xcf, 0x00, 0x00, 0xf3, 0xcf, 0x00, 0x00, 0xf3, 0xcf, 0x00,
	0x00, 0xf3, 0xcf, 0x00, 0x00, 0xf3, 0xcf, 0x00, 0x00, 0xf3, 0xcf, 0x00, 0x00, 0xf3, 0xcf, 0x00,
	0x00, 0xf3, 0xcf, 0x00, 0x00, 0xf3, 0xcf, 0x00, 0x00, 0xf3, 0xcf, 0x00, 0x00, 0xf3, 0xcf, 0x00,
	0x00, 0xf3, 0xcf, 0x00, 0x00, 0xf3, 0xcf, 0x00, 0x00, 0xf3, 0xcf, 0x00, 0x00, 0xf3, 0xcf, 0x00,
	0x00, 0xf3, 0xcf, 0x00, 0x00, 0xf3, 0xcf, 0x00, 0x00, 0xf3, 0xcf, 0x00, 0x00, 0xf3, 0xcf, 0x00,
	0x01, 0xf3, 0xcf, 0x80, 0x03, 0xe3, 0xc7, 0xc0, 0x03, 0xc7, 0xe3, 0xc0, 0x07, 0x8f, 0xf1, 0xe0,
	0x07, 0x9f, 0xf9, 0xe0, 0x07, 0x9f, 0xf9, 0xe0, 0x07, 0x3f, 0xfc, 0xe0, 0x07, 0x3f, 0xfc, 0xe0,
	0x07, 0x3f, 0xfc, 0xe0, 0x07, 0x9f, 0xf9, 0xe0, 0x07, 0x9f, 0xf9, 0xe0, 0x07, 0xcf, 0xf3, 0xe0,
	0x03, 0xc7, 0xe3, 0xc0, 0x03, 0xe0, 0x07, 0xc0, 0x01, 0xf8, 0x1f, 0x80, 0x00, 0xff, 0xff, 0x00,
	0x00, 0x7f, 0xfe, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char bmpFan [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00,
	0x00, 0x00, 0x0f, 0xfc, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xfe, 0x00, 0x00,
	0x00, 0x00, 0xfc, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x07, 0xc0, 0x00,
	0x00, 0x07, 0xc0, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x0f, 0x00, 0x1f, 0xc0, 0x00, 0xf0, 0x00,
	0x00, 0x1e, 0x00, 0xff, 0xfc, 0x00, 0x38, 0x00, 0x00, 0x3c, 0x01, 0xff, 0xff, 0x00, 0x1c, 0x00,
	0x00, 0x78, 0x03, 0xff, 0xff, 0xc0, 0x0e, 0x00, 0x00, 0xf0, 0x07, 0xff, 0xff, 0xe0, 0x07, 0x00,
	0x00, 0xe0, 0x0f, 0xff, 0xff, 0xf0, 0x03, 0x80, 0x01, 0xc0, 0x0f, 0xff, 0xff, 0xf8, 0x03, 0x80,
	0x03, 0x80, 0x0f, 0xff, 0xff, 0xf8, 0x01, 0xc0, 0x03, 0x80, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0xe0,
	0x07, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0xe0, 0x07, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0x70,
	0x0e, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x70, 0x0e, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x30,
	0x0c, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 0x38, 0x1c, 0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 0x18,
	0x1c, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x18, 0x18, 0x00, 0x01, 0xfc, 0x1c, 0x00, 0x00, 0x1c,
	0x18, 0x00, 0x00, 0xf3, 0xc8, 0x00, 0x00, 0x1c, 0x38, 0x07, 0xc0, 0x67, 0xf0, 0x7f, 0xc0, 0x1c,
	0x38, 0x07, 0xe0, 0x0f, 0xf3, 0xff, 0xf0, 0x0c, 0x38, 0x0f, 0xf8, 0x1f, 0xf9, 0xff, 0xf8, 0x0c,
	0x38, 0x0f, 0xff, 0x9c, 0x39, 0xff, 0xf8, 0x0c, 0x38, 0x1f, 0xff, 0x9c, 0x3d, 0xff, 0xfc, 0x0c,
	0x38, 0x1f, 0xff, 0x9c, 0x3d, 0xff, 0xfc, 0x0c, 0x38, 0x1f, 0xff, 0x9e, 0x79, 0xff, 0xfe, 0x0c,
	0x38, 0x1f, 0xff, 0xdf, 0xf9, 0xff, 0xfe, 0x0c, 0x38, 0x1f, 0xff, 0xcf, 0xf3, 0xff, 0xfe, 0x0c,
	0x38, 0x1f, 0xff, 0xe7, 0xe7, 0xff, 0xfe, 0x1c, 0x18, 0x1f, 0xff, 0xf0, 0x0f, 0xff, 0xfc, 0x1c,
	0x18, 0x1f, 0xff, 0xfc, 0x1f, 0xff, 0xfc, 0x1c, 0x1c, 0x0f, 0xff, 0xff, 0x1f, 0xff, 0xfc, 0x18,
	0x1c, 0x0f, 0xff, 0xff, 0x1f, 0xff, 0xf8, 0x18, 0x0c, 0x0f, 0xff, 0xff, 0x0f, 0xff, 0xf8, 0x38,
	0x0e, 0x07, 0xff, 0xff, 0x0f, 0xff, 0xf0, 0x30, 0x0e, 0x07, 0xff, 0xfe, 0x0f, 0xff, 0xf0, 0x70,
	0x07, 0x03, 0xff, 0xfe, 0x0f, 0xff, 0xe0, 0x70, 0x07, 0x03, 0xff, 0xfc, 0x0f, 0xff, 0xc0, 0xe0,
	0x03, 0x81, 0xff, 0xfc, 0x0f, 0xff, 0x80, 0xe0, 0x03, 0x80, 0xff, 0xf8, 0x0f, 0xff, 0x01, 0xc0,
	0x01, 0xc0, 0x7f, 0xf8, 0x0f, 0xfe, 0x03, 0x80, 0x00, 0xe0, 0x3f, 0xe0, 0x0f, 0xf8, 0x03, 0x80,
	0x00, 0xf0, 0x0f, 0xc0, 0x07, 0xc0, 0x07, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00,
	0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00,
	0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x01, 0xe0, 0x00,
	0x00, 0x01, 0xf0, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x1f, 0x00, 0x00,
	0x00, 0x00, 0x3f, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x1f, 0xf8, 0x00, 0x00,
	0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};


const unsigned char bmpPower [] PROGMEM = {
	0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0f, 0xf0, 0x0e, 0x00, 0x00,
	0x00, 0x01, 0xf8, 0x0f, 0xf0, 0x1f, 0x80, 0x00, 0x00, 0x03, 0xfc, 0x0f, 0xf0, 0x3f, 0xc0, 0x00,
	0x00, 0x07, 0xfe, 0x0f, 0xf0, 0x7f, 0xe0, 0x00, 0x00, 0x0f, 0xfe, 0x0f, 0xf0, 0x7f, 0xf0, 0x00,
	0x00, 0x1f, 0xfe, 0x0f, 0xf0, 0x7f, 0xf8, 0x00, 0x00, 0x3f, 0xfe, 0x0f, 0xf0, 0x7f, 0xfc, 0x00,
	0x00, 0x7f, 0xfc, 0x0f, 0xf0, 0x3f, 0xfe, 0x00, 0x00, 0xff, 0xf8, 0x0f, 0xf0, 0x1f, 0xff, 0x00,
	0x00, 0xff, 0xf0, 0x0f, 0xf0, 0x0f, 0xff, 0x80, 0x01, 0xff, 0xe0, 0x0f, 0xf0, 0x07, 0xff, 0x80,
	0x03, 0xff, 0xc0, 0x0f, 0xf0, 0x01, 0xff, 0xc0, 0x03, 0xff, 0x80, 0x0f, 0xf0, 0x01, 0xff, 0xc0,
	0x07, 0xff, 0x00, 0x0f, 0xf0, 0x00, 0xff, 0xe0, 0x07, 0xfe, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0xe0,
	0x0f, 0xfc, 0x00, 0x0f, 0xf0, 0x00, 0x3f, 0xf0, 0x0f, 0xfc, 0x00, 0x0f, 0xf0, 0x00, 0x3f, 0xf0,
	0x0f, 0xf8, 0x00, 0x0f, 0xf0, 0x00, 0x1f, 0xf0, 0x0f, 0xf8, 0x00, 0x0f, 0xf0, 0x00, 0x1f, 0xf0,
	0x1f, 0xf8, 0x00, 0x0f, 0xf0, 0x00, 0x1f, 0xf8, 0x1f, 0xf0, 0x00, 0x0f, 0xf0, 0x00, 0x0f, 0xf8,
	0x1f, 0xf0, 0x00, 0x0f, 0xf0, 0x00, 0x0f, 0xf8, 0x1f, 0xf0, 0x00, 0x0f, 0xf0, 0x00, 0x0f, 0xfc,
	0x3f, 0xf0, 0x00, 0x0f, 0xf0, 0x00, 0x0f, 0xfc, 0x3f, 0xf0, 0x00, 0x0f, 0xf0, 0x00, 0x0f, 0xfc,
	0x3f, 0xf0, 0x00, 0x0f, 0xf0, 0x00, 0x0f, 0xfc, 0x3f, 0xf0, 0x00, 0x07, 0xe0, 0x00, 0x0f, 0xfc,
	0x3f, 0xf0, 0x00, 0x01, 0x80, 0x00, 0x0f, 0xfc, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc,
	0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8,
	0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0,
	0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0,
	0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0,
	0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0,
	0x03, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0x80,
	0x01, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0x80, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0x00,
	0x00, 0x7f, 0xfe, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x01, 0xff, 0xfc, 0x00,
	0x00, 0x1f, 0xff, 0xf0, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
	0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
	0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00,
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00,
	0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00,
};


const unsigned char bmpAuto [] PROGMEM = {
	0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00,
	0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f,
	0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f,
	0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff,
	0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff,
	0x03, 0xff, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff,
	0x07, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xff,
	0x0f, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xff, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x1f, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff,
	0x3f, 0xfc, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff,
	0x7f, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff,
	0x7f, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfc,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff,
	0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xfe,
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0xfc,
	0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0xff, 0xf8,
	0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xff, 0xff, 0x80, 0x00, 0x00, 0x03, 0xff, 0xf0,
	0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xe0,
	0xff, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xc0,
	0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
	0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
	0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
	0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00,
	0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00,
};


static int16_t const BTN_0_POS_X 			= 30;
static int16_t const BTN_0_POS_Y 			= 16;
static int16_t const BTN_0_FILL_POS_X 		= 34;
static int16_t const BTN_0_FILL_POS_Y 		= 20;

static int16_t const BTN_1_POS_X 			= 170;
static int16_t const BTN_1_POS_Y 			= 16;
static int16_t const BTN_1_FILL_POS_X 		= 174;
static int16_t const BTN_1_FILL_POS_Y 		= 20;

static int16_t const BTN_2_POS_X 			= 30;
static int16_t const BTN_2_POS_Y 			= 130;
static int16_t const BTN_2_FILL_POS_X 		= 34;
static int16_t const BTN_2_FILL_POS_Y 		= 134;

static int16_t const BTN_3_POS_X 			= 170;
static int16_t const BTN_3_POS_Y 			= 130;
static int16_t const BTN_3_FILL_POS_X 		= 174;
static int16_t const BTN_3_FILL_POS_Y 		= 134;

static int16_t const BTN_SIZE_X 			= 120;
static int16_t const BTN_SIZE_Y 			= 94;
static int16_t const BTN_FILL_SIZE_X 		= 112;
static int16_t const BTN_FILL_SIZE_Y 		= 86;
static int16_t const BTN_SIZE_CNR 			= 6;

static int16_t const BMP_CLOCK_POS_X 		= 202;
static int16_t const BMP_CLOCK_POS_Y 		= 29;
static int16_t const BMP_CLOCK_SIZE_X 		= 56;
static int16_t const BMP_CLOCK_SIZE_Y 		= 56;
static int16_t const BMP_HUMIDITY_POS_X		= 62;
static int16_t const BMP_HUMIDITY_POS_Y 	= 149;
static int16_t const BMP_HUMIDITY_SIZE_X	= 56;
static int16_t const BMP_HUMIDITY_SIZE_Y 	= 56;
static int16_t const BMP_RETURN_POS_X 		= 202;
static int16_t const BMP_RETURN_POS_Y 		= 149;
static int16_t const BMP_RETURN_SIZE_X 		= 56;
static int16_t const BMP_RETURN_SIZE_Y 		= 56;
static int16_t const BMP_TEMP_POS_X 		= 74;
static int16_t const BMP_TEMP_POS_Y 		= 31;
static int16_t const BMP_TEMP_SIZE_X 		= 32;
static int16_t const BMP_TEMP_SIZE_Y 		= 64;

static int16_t const BMP_FAN_POS_X 			= 198;
static int16_t const BMP_FAN_POS_Y 			= 31;
static int16_t const BMP_FAN_SIZE_X 		= 64;
static int16_t const BMP_FAN_SIZE_Y 		= 64;

static int16_t const BMP_POWER_POS_X 		= 58;
static int16_t const BMP_POWER_POS_Y 		= 31;
static int16_t const BMP_POWER_SIZE_X 		= 64;
static int16_t const BMP_POWER_SIZE_Y 		= 64;

static int16_t const BMP_AUTO_POS_X 		= 198;
static int16_t const BMP_AUTO_POS_Y 		= 31;
static int16_t const BMP_AUTO_SIZE_X 		= 64;
static int16_t const BMP_AUTO_SIZE_Y 		= 64;

TftDisplay::TftDisplay() :
	display_( DISPLAY_CS, DISPLAY_DC, DISPLAY_RST )
{
	this->display_.begin();
	this->display_.setRotation( DISPLAY_ROTATION );
//	this->display_.setFont( &FreeSans18pt7b );
	this->display_.setTextColor( ILI9341_WHITE );
	this->display_.setTextSize( TEXT_SIZE );
}

TftDisplay & TftDisplay::instance()
{
	static TftDisplay instance;
	return instance;
}

void TftDisplay::clear()
{
    this->display_.fillScreen( ILI9341_BLUE );
}

void TftDisplay::btnAutoPressed()
{
	this->display_.drawRoundRect( BTN_1_POS_X, BTN_1_POS_Y, BTN_SIZE_X, BTN_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.fillRoundRect( BTN_1_FILL_POS_X, BTN_1_FILL_POS_Y, BTN_FILL_SIZE_X, BTN_FILL_SIZE_Y,  BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.drawBitmap( BMP_AUTO_POS_X, BMP_AUTO_POS_Y, bmpAuto, BMP_AUTO_SIZE_X, BMP_AUTO_SIZE_Y, ILI9341_BLUE );
}

void TftDisplay::btnAutoUnpressed()
{
	this->display_.drawRoundRect( BTN_1_POS_X, BTN_1_POS_Y, BTN_SIZE_X, BTN_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.fillRoundRect( BTN_1_FILL_POS_X, BTN_1_FILL_POS_Y, BTN_FILL_SIZE_X, BTN_FILL_SIZE_Y,  BTN_SIZE_CNR, ILI9341_BLUE );
	this->display_.drawBitmap( BMP_AUTO_POS_X, BMP_AUTO_POS_Y, bmpAuto, BMP_AUTO_SIZE_X, BMP_AUTO_SIZE_Y, ILI9341_WHITE );
}

void TftDisplay::btnClockPressed()
{
	this->display_.drawRoundRect( BTN_1_POS_X, BTN_1_POS_Y, BTN_SIZE_X, BTN_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.fillRoundRect( BTN_1_FILL_POS_X,  BTN_1_FILL_POS_Y, BTN_FILL_SIZE_X, BTN_FILL_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.drawBitmap( BMP_FAN_POS_X, BMP_FAN_POS_Y, bmpFan, BMP_FAN_SIZE_X, BMP_FAN_SIZE_Y, ILI9341_BLUE );
//	this->display_.drawBitmap( BMP_CLOCK_POS_X, BMP_CLOCK_POS_Y, bmpClock, BMP_CLOCK_SIZE_X, BMP_CLOCK_SIZE_Y, ILI9341_BLUE );
}

void TftDisplay::btnHumidityPressed()
{
	this->display_.drawRoundRect( BTN_2_POS_X, BTN_2_POS_Y, BTN_SIZE_X, BTN_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.fillRoundRect(  BTN_2_FILL_POS_X, BTN_2_FILL_POS_Y, BTN_FILL_SIZE_X, BTN_FILL_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.drawBitmap( BMP_HUMIDITY_POS_X, BMP_HUMIDITY_POS_Y, bmpHumidity, BMP_HUMIDITY_SIZE_X, BMP_HUMIDITY_SIZE_Y, ILI9341_BLUE );
}

void TftDisplay::btnPowerPressed()
{
	this->display_.drawRoundRect( BTN_0_POS_X, BTN_1_POS_Y, BTN_SIZE_X, BTN_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.fillRoundRect( BTN_0_FILL_POS_X, BTN_0_FILL_POS_Y, BTN_FILL_SIZE_X, BTN_FILL_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.drawBitmap( BMP_POWER_POS_X, BMP_POWER_POS_Y, bmpPower, BMP_POWER_SIZE_X, BMP_POWER_SIZE_Y, ILI9341_BLUE );
}

void TftDisplay::btnPowerUnpressed()
{
	this->display_.drawRoundRect( BTN_0_POS_X, BTN_1_POS_Y, BTN_SIZE_X, BTN_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.fillRoundRect( BTN_0_FILL_POS_X, BTN_0_FILL_POS_Y, BTN_FILL_SIZE_X, BTN_FILL_SIZE_Y, BTN_SIZE_CNR, ILI9341_BLUE );
	this->display_.drawBitmap( BMP_POWER_POS_X, BMP_POWER_POS_Y, bmpPower, BMP_POWER_SIZE_X, BMP_POWER_SIZE_Y, ILI9341_WHITE );
}

void TftDisplay::btnReturnPressed()
{
	this->display_.drawRoundRect( BTN_3_POS_X, BTN_3_POS_Y, BTN_SIZE_X, BTN_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.fillRoundRect( BTN_3_FILL_POS_X, BTN_3_FILL_POS_Y, BTN_FILL_SIZE_X, BTN_FILL_SIZE_Y,  BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.drawBitmap( BMP_RETURN_POS_X, BMP_RETURN_POS_Y, bmpReturn, BMP_RETURN_SIZE_X, BMP_RETURN_SIZE_Y, ILI9341_BLUE );
}

void TftDisplay::btnTemperaturePressed()
{
	this->display_.drawRoundRect( BTN_0_POS_X, 		BTN_0_POS_Y, 		BTN_SIZE_X, 		BTN_SIZE_Y, 		BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.fillRoundRect( BTN_0_FILL_POS_X, BTN_0_FILL_POS_Y, 	BTN_FILL_SIZE_X, 	BTN_FILL_SIZE_Y,  	BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.drawBitmap( BMP_TEMP_POS_X, BMP_TEMP_POS_Y, bmpTemperature, BMP_TEMP_SIZE_X, BMP_TEMP_SIZE_Y, ILI9341_BLUE );
}

void TftDisplay::btnClockUnPressed()
{
	this->display_.drawRoundRect( BTN_1_POS_X, BTN_1_POS_Y, BTN_SIZE_X, BTN_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.drawBitmap( BMP_FAN_POS_X, BMP_FAN_POS_Y, bmpFan, BMP_FAN_SIZE_X, BMP_FAN_SIZE_Y, ILI9341_WHITE );
//	this->display_.drawBitmap( BMP_CLOCK_POS_X, BMP_CLOCK_POS_Y, bmpClock, BMP_CLOCK_SIZE_X, BMP_CLOCK_SIZE_Y, ILI9341_WHITE );
}

void TftDisplay::btnHumidityUnPressed()
{
	this->display_.drawRoundRect( BTN_2_POS_X, BTN_2_POS_Y, BTN_SIZE_X, BTN_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.drawBitmap( BMP_HUMIDITY_POS_X, BMP_HUMIDITY_POS_Y, bmpHumidity, BMP_HUMIDITY_SIZE_X, BMP_HUMIDITY_SIZE_Y, ILI9341_WHITE );
}

void TftDisplay::btnReturnUnpressed()
{
	this->display_.drawRoundRect( BTN_3_POS_X, BTN_3_POS_Y, BTN_SIZE_X, BTN_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.drawBitmap( BMP_RETURN_POS_X, BMP_RETURN_POS_Y, bmpReturn, BMP_RETURN_SIZE_X, BMP_RETURN_SIZE_Y, ILI9341_WHITE );
}

void TftDisplay::btnTemperatureUnPressed()
{
	this->display_.drawRoundRect( BTN_0_POS_X, BTN_0_POS_Y, BTN_SIZE_X, BTN_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.drawBitmap( BMP_TEMP_POS_X, BMP_TEMP_POS_Y, bmpTemperature, BMP_TEMP_SIZE_X, BMP_TEMP_SIZE_Y, ILI9341_WHITE );
}

void TftDisplay::displayButtons()
{
	this->clear();

	this->btnTemperatureUnPressed();
	this->btnClockUnPressed();
	this->btnHumidityUnPressed();
	this->btnReturnUnpressed();
}

void TftDisplay::displayHumidity(
	float const HUMIDITY )
{
	sprintf( tempBuffer, "%2.1f %%", HUMIDITY );
	this->display_.fillRect( RH_VALUE_X, RH_VALUE_Y, VALUE_WIDTH, VALUE_HEIGHT, ILI9341_BLUE );
	this->display_.setCursor( RH_VALUE_X, RH_VALUE_Y );
	this->display_.print( tempBuffer );
}

void TftDisplay::displayIcons()
{
	this->display_.drawBitmap( 50, 16, bmpClock, 56, 56, ILI9341_WHITE );
	this->display_.drawBitmap( 62, 88, bmpTemperature, 32, 64, ILI9341_WHITE );
	this->display_.drawBitmap( 50, 168, bmpHumidity, 56, 56, ILI9341_WHITE );
}

void TftDisplay::displayStatus()
{
	this->clear();
	this->displayIcons();
//	this->displayTime( Time.hour(), Time.minute() );
//	this->display_.displayHumidity( sensor.getHumidity() );
//	this->display_.displayTemperature( sensor.getTemperature() );
}

void TftDisplay::displayTemperature(
	float const TEMPERATURE )
{
	sprintf( tempBuffer, "%2.1f C", TEMPERATURE );
	this->display_.fillRect( TEMP_VALUE_X, TEMP_VALUE_Y, VALUE_WIDTH, VALUE_HEIGHT, ILI9341_BLUE );
	this->display_.setCursor( TEMP_VALUE_X, TEMP_VALUE_Y );
	this->display_.print( tempBuffer );
}

void TftDisplay::displayTime(
	uint8_t const HOURS,
	uint8_t const MINUTES )
{
	sprintf( tempBuffer, "%02d:%02d", HOURS, MINUTES );
	this->display_.fillRect( TIME_VALUE_X, TIME_VALUE_Y, VALUE_WIDTH, VALUE_HEIGHT, ILI9341_BLUE );
	this->display_.setCursor( TIME_VALUE_X, TIME_VALUE_Y );
	this->display_.print( tempBuffer );
}

void TftDisplay::menuFan()
{
    this->display_.fillScreen( ILI9341_BLUE );
	this->display_.drawRoundRect( BTN_0_POS_X, BTN_1_POS_Y, BTN_SIZE_X, BTN_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.drawBitmap( BMP_POWER_POS_X, BMP_POWER_POS_Y, bmpPower, BMP_POWER_SIZE_X, BMP_POWER_SIZE_Y, ILI9341_WHITE );
	this->display_.drawRoundRect( BTN_1_POS_X, BTN_1_POS_Y, BTN_SIZE_X, BTN_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.drawBitmap( BMP_AUTO_POS_X, BMP_AUTO_POS_Y, bmpAuto, BMP_AUTO_SIZE_X, BMP_AUTO_SIZE_Y, ILI9341_WHITE );
	this->display_.drawBitmap( 58, 145, bmpFan, BMP_FAN_SIZE_X, BMP_FAN_SIZE_Y, ILI9341_WHITE );
	this->display_.drawRoundRect( BTN_3_POS_X, BTN_3_POS_Y, BTN_SIZE_X, BTN_SIZE_Y, BTN_SIZE_CNR, ILI9341_WHITE );
	this->display_.drawBitmap( BMP_RETURN_POS_X, BMP_RETURN_POS_Y, bmpReturn, BMP_RETURN_SIZE_X, BMP_RETURN_SIZE_Y, ILI9341_WHITE );
}

void TftDisplay::updateHumidity(
	float const HUMIDITY )
{
	sprintf( tempBuffer, "%2.1f %%", HUMIDITY );
	if ( strcmp( this->previousHumidity_, tempBuffer ) )
	{
		this->displayHumidity( HUMIDITY );
		strcpy( this->previousHumidity_, tempBuffer );
	}
}

void TftDisplay::updateTemperature(
	float const TEMPERATURE )
{
	sprintf( tempBuffer, "%2.1f C", TEMPERATURE );
	if ( strcmp( this->previousTemperature_, tempBuffer ) )
	{
		this->displayTemperature( TEMPERATURE );
		strcpy( this->previousTemperature_, tempBuffer );
	}
}

void TftDisplay::updateTime(
	uint8_t const HOURS,
	uint8_t const MINUTES )
{
	if ( ( this->previousHours_ != HOURS ) ||
		( this->previousMinutes_ != MINUTES ) )
	{
		this->displayTime( HOURS, MINUTES );
		this->previousHours_ = HOURS;
		this->previousMinutes_ = MINUTES;
	}
}
